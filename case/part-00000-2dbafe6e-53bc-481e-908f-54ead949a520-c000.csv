_1,_2,_3
PassengerId,'PassengerId' is not null,".isComplete(\"PassengerId\")"
PassengerId,'PassengerId' has type Integral,".hasDataType(\"PassengerId\", ConstrainableDataTypes.Integral)"
PassengerId,'PassengerId' has no negative values,".isNonNegative(\"PassengerId\")"
Name,'Name' is not null,".isComplete(\"Name\")"
Ticket,'Ticket' is not null,".isComplete(\"Ticket\")"
Pclass,'Pclass' is not null,".isComplete(\"Pclass\")"
Pclass,'Pclass' has type Integral,".hasDataType(\"Pclass\", ConstrainableDataTypes.Integral)"
Pclass,'Pclass' has no negative values,".isNonNegative(\"Pclass\")"
Parch,'Parch' is not null,".isComplete(\"Parch\")"
Parch,'Parch' has type Integral,".hasDataType(\"Parch\", ConstrainableDataTypes.Integral)"
Parch,'Parch' has no negative values,".isNonNegative(\"Parch\")"
Embarked,'Embarked' has less than 1% missing values,".hasCompleteness(\"Embarked\", _ >= 0.99, Some(\"It should be above 0.99!\"))"
Embarked,"'Embarked' has value range 'S', 'C', 'Q'",".isContainedIn(\"Embarked\", Array(\"S\", \"C\", \"Q\"))"
Embarked,"'Embarked' has value range 'S', 'C' for at least 89.0% of values",".isContainedIn(\"Embarked\", Array(\"S\", \"C\"), _ >= 0.89, Some(\"It should be above 0.89!\"))"
Age,'Age' has less than 23% missing values,".hasCompleteness(\"Age\", _ >= 0.77, Some(\"It should be above 0.77!\"))"
Age,'Age' has type Fractional,".hasDataType(\"Age\", ConstrainableDataTypes.Fractional)"
Age,'Age' has no negative values,".isNonNegative(\"Age\")"
Cabin,'Cabin' has less than 80% missing values,".hasCompleteness(\"Cabin\", _ >= 0.2, Some(\"It should be above 0.2!\"))"
Fare,'Fare' is not null,".isComplete(\"Fare\")"
Fare,'Fare' has type Fractional,".hasDataType(\"Fare\", ConstrainableDataTypes.Fractional)"
Fare,'Fare' has no negative values,".isNonNegative(\"Fare\")"
SibSp,'SibSp' is not null,".isComplete(\"SibSp\")"
SibSp,'SibSp' has type Integral,".hasDataType(\"SibSp\", ConstrainableDataTypes.Integral)"
SibSp,'SibSp' has no negative values,".isNonNegative(\"SibSp\")"
Survived,'Survived' is not null,".isComplete(\"Survived\")"
Survived,'Survived' has type Integral,".hasDataType(\"Survived\", ConstrainableDataTypes.Integral)"
Survived,'Survived' has no negative values,".isNonNegative(\"Survived\")"
Sex,'Sex' is not null,".isComplete(\"Sex\")"
Sex,"'Sex' has value range 'male', 'female'",".isContainedIn(\"Sex\", Array(\"male\", \"female\"))"
